{"version":3,"sources":["domain.ts","config.ts","APIStackClient.ts","BalancerCard.tsx","EnvColumn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getInstanceUrl","instance","stage","env","name","component","urlPart","domain","stages","environments","prod","prud","che","components","FO","title","CSU","Storage","Printing","balancers","url","APIStackUrl","APIStackKey","resolveIP","a","fetch","resolvableUrl","then","res","json","body","ip","console","error","BalancerCard","balancer","instances","activeInstance","find","i","className","cardStyle","Header","variant","getBg","Body","style","marginBottom","$nest","transition","boxShadow","blue","EnvColumn","colStyle","colHeaderStyle","map","componentInstances","filter","componentBalancer","b","Error","key","textAlign","App","props","state","getInstances","Promise","all","this","resolveInstanceIP","forceUpdate","Object","values","envInstances","envBalancers","Fragment","React","Component","keys","forEach","environment","stageName","cmp","instanceData","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d7090c3.chunk.js","sourcesContent":["export interface IEnvironment {\n  // prod/prud/che/whatever\n  name: string\n\n  // traceair.net / traceair.ru\n  domain: string\n}\n\n// office/csu/fo-storage\nexport interface TaComponent {\n  title: string\n  urlPart: string\n}\n\n// blue/green\nexport type Stage = string\n\nexport type IPAddress = string\nexport type DNSName = string\n\nexport interface IInstance {\n  env: IEnvironment\n  stage: Stage\n  component: TaComponent\n  url: string\n  ip?: IPAddress | null\n}\n\nexport interface IBalancer {\n  env: IEnvironment\n  component: TaComponent\n  // office.traceair.net/csu-api.traceair.ru\n  url: string\n  ip?: IPAddress | null\n}\n\nexport function getInstanceUrl(instance: IInstance): DNSName {\n  return `${instance.stage}-${instance.env.name}-${instance.component.urlPart}.${instance.env.domain}`\n}\n","import { IBalancer, IEnvironment, TaComponent } from './domain'\n\nexport const environments: { [key: string]: IEnvironment } = {\n  prod: {\n    name: 'prod',\n    domain: 'traceair.net'\n  },\n  prud: {\n    name: 'prud',\n    domain: 'traceair.ru'\n  },\n  che: {\n    name: 'che',\n    domain: 'traceair.ru'\n  }\n}\n\n\nexport enum stages {\n  blue = 'blue',\n  green = 'green'\n}\n\nexport const components: { [key: string]: TaComponent } = {\n  FO: { title: 'Frontoffice', urlPart: 'fo' },\n  CSU: { title: 'CSU', urlPart: 'csu' },\n  Storage: { title: 'FOStorage', urlPart: 'fo-storage' },\n  Printing: { title: 'Printing', urlPart: 'printing' }\n}\n\nexport const balancers: IBalancer[] = [\n  {\n    component: components.FO,\n    env: environments.prod,\n    url: 'office.traceair.net'\n  },\n  {\n    component: components.FO,\n    env: environments.prud,\n    url: 'office.traceair.ru'\n  },\n  {\n    component: components.FO,\n    env: environments.che,\n    url: 'my.traceair.ru'\n  },\n\n  {\n    component: components.CSU,\n    env: environments.prod,\n    url: 'csu-api.traceair.net'\n  },\n  {\n    component: components.CSU,\n    env: environments.prud,\n    url: 'csu-api.traceair.ru'\n  },\n  {\n    component: components.CSU,\n    env: environments.che,\n    url: 'csu-api-my.traceair.ru'\n  },\n\n  {\n    component: components.Storage,\n    env: environments.prod,\n    url: 'fo-storage.traceair.net'\n  },\n  {\n    component: components.Storage,\n    env: environments.prud,\n    url: 'fo-storage.traceair.ru'\n  },\n  {\n    component: components.Storage,\n    env: environments.che,\n    url: 'fo-storage-my.traceair.ru'\n  },\n\n  {\n    component: components.Printing,\n    env: environments.prod,\n    url: 'printing.traceair.net'\n  },\n  {\n    component: components.Printing,\n    env: environments.prud,\n    url: 'printing.traceair.ru'\n  },\n  {\n    component: components.Printing,\n    env: environments.che,\n    url: 'printing-my.traceair.ru'\n  }\n]\n\nexport const APIStackUrl = 'http://api.ipstack.com/'\n\nexport const APIStackKey = '91318f82b6dfb8201157e3f8c7fd29f0'\n","import { IPAddress } from './domain'\nimport { APIStackKey, APIStackUrl } from './config'\n\nexport async function resolveIP(url: string): Promise<IPAddress | null> {\n  try {\n    const body = await fetch(apiStackUrl(url)).then(res => res.json())\n    return body.ip\n  } catch (err) {\n    console.error(`APIStack request failed: ${err}`)\n    throw err\n  }\n}\n\nfunction apiStackUrl(resolvableUrl: string): string {\n  return `${APIStackUrl}/${resolvableUrl}?access_key=${APIStackKey}`\n}\n","import * as React from 'react'\nimport { style } from 'typestyle'\nimport { getInstanceUrl, IBalancer, IInstance } from './domain'\nimport Card from 'react-bootstrap/Card'\nimport { stages } from './config'\nimport Badge from 'react-bootstrap/Badge'\n\ninterface IBalancerCardProps {\n  balancer: IBalancer\n  instances: IInstance[]\n}\n\nconst BalancerCard: React.FunctionComponent<IBalancerCardProps> = ({ balancer, instances }: IBalancerCardProps) => {\n  const activeInstance = instances.find(i => i.ip === balancer.ip && i.ip !== null)\n  return (\n    <Card className={cardStyle}>\n      <Card.Header>\n        {balancer.component.title}\n        <Badge variant={getBg(activeInstance)}>{balancer.ip}</Badge>\n      </Card.Header>\n      <Card.Body>\n        {getInstanceUrl(instances[0])}<br/>\n        {getInstanceUrl(instances[1])}\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default BalancerCard\n\nconst cardStyle = style({\n  marginBottom: '8px',\n  $nest: {\n    '&:hover': {\n      transition: 'ease-in',\n      boxShadow: '0 5px 5px 0px rgba(0, 0, 0, 0.2)'\n    }\n  }\n})\n\nconst getBg = (activeInstance?: IInstance) => {\n  if (!activeInstance) {\n    return 'light'\n  }\n\n  return activeInstance.stage === stages.blue ? 'primary' : 'success'\n}\n","import * as React from 'react'\nimport { IBalancer, IEnvironment, IInstance, TaComponent } from './domain'\nimport BalancerCard from './BalancerCard'\nimport Col from 'react-bootstrap/Col'\nimport { style } from 'typestyle'\n\ninterface IEnvColumnProps {\n  env: IEnvironment\n  instances: IInstance[]\n  balancers: IBalancer[]\n  components: TaComponent[]\n}\n\nconst EnvColumn: React.FunctionComponent<IEnvColumnProps> = ({\n  env,\n  instances,\n  balancers,\n  components\n}: IEnvColumnProps) => {\n  return (\n    <Col className={colStyle}>\n      <h1 className={colHeaderStyle}>{env.name}</h1>\n      {components.map(component => {\n        const componentInstances = instances.filter(i => i.component === component)\n        const componentBalancer = balancers.find(b => b.component === component)\n        if (!componentBalancer) {\n          throw new Error(`Balancer not found for component ${component} in ${env.name}`)\n        }\n        return (\n          <React.Fragment key={component.urlPart}>\n            <BalancerCard instances={componentInstances} balancer={componentBalancer} />\n          </React.Fragment>\n        )\n      })}\n    </Col>\n  )\n}\n\nexport default EnvColumn\n\nconst colStyle = style({\n\n})\n\nconst colHeaderStyle = style({\n  textAlign: 'center'\n})\n","/* eslint-disable @typescript-eslint/member-delimiter-style */\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport React from 'react'\nimport './App.css'\nimport { getInstanceUrl, IBalancer, IEnvironment, IInstance } from './domain'\nimport { balancers, components, environments, stages } from './config'\nimport { resolveIP } from './APIStackClient'\nimport EnvColumn from './EnvColumn'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\n\ninterface IAppState {\n  environments: { [key: string]: IEnvironment }\n  instances: IInstance[]\n  balancers: IBalancer[]\n}\n\nexport default class App extends React.Component<{}, IAppState> {\n  constructor(props: {}) {\n    super(props)\n    this.state = {\n      environments: environments,\n      instances: getInstances(),\n      balancers: balancers\n    }\n  }\n  async componentDidMount() {\n    await Promise.all(this.state.instances.map(i => resolveInstanceIP(i)))\n    await Promise.all(this.state.balancers.map(b => resolveInstanceIP(b)))\n    this.forceUpdate()\n  }\n\n  render() {\n    const { instances, balancers, environments } = this.state\n\n    return (\n      <Container>\n        <Row>\n          {Object.values(environments).map(env => {\n            const envInstances = instances.filter(i => i.env === env)\n            const envBalancers = balancers.filter(i => i.env === env)\n            return (\n              <React.Fragment key={env.name}>\n                <EnvColumn\n                  env={env}\n                  instances={envInstances}\n                  balancers={envBalancers}\n                  components={Object.values(components)}\n                />\n              </React.Fragment>\n            )\n          })}\n        </Row>\n      </Container>\n    )\n  }\n}\n\nfunction getInstances(): IInstance[] {\n  const instances: IInstance[] = []\n  Object.keys(environments).forEach(env => {\n    const environment = environments[env]\n    Object.keys(stages).forEach(stageName => {\n      const stage: stages = stages[stageName as stages]\n      Object.keys(components).forEach(cmp => {\n        const instanceData = {\n          component: components[cmp],\n          env: environment,\n          stage,\n          ip: null,\n          url: ''\n        }\n        instances.push({\n          ...instanceData,\n          url: getInstanceUrl(instanceData)\n        })\n      })\n    })\n  })\n  return instances\n}\n\nasync function resolveInstanceIP<T extends IBalancer | IInstance>(instance: T) {\n  const { url } = instance\n  try {\n    const ip = await resolveIP(url)\n    // eslint-disable-next-line require-atomic-updates\n    instance.ip = ip\n  } catch (err) {\n    console.error(err)\n    // eslint-disable-next-line require-atomic-updates\n    instance.ip = null\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}